/*
 * Copyright 2015 Karl Birch.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.mbwkarl.analysistoolgui.visual;

import com.mbwkarl.analysistoolgui.utils.DataStreamTransferHandler;
import com.mbwkarl.analysistool.model.DataStream;
import com.mbwkarl.analysistool.model.ModelController;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragSource;
import java.awt.dnd.DragSourceDragEvent;
import java.awt.dnd.DragSourceDropEvent;
import java.awt.dnd.DragSourceEvent;
import java.awt.dnd.DragSourceListener;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.TransferHandler;

/**
 *
 * @author Karl Birch
 */
public class ControlPanel extends javax.swing.JPanel {
    
    private final ModelController modelController;
    private File selectedFile = null;
    private final DragSource ds = new DragSource();
    
    private boolean loadable = true;

    /**
     * Creates new form ControlPanel
     * @param maxwidth
     * @param maxheight
     */
    public ControlPanel(int maxwidth, int maxheight, ModelController mc) {
        modelController = mc;
        initComponents();
        java.awt.Dimension size = new java.awt.Dimension(maxwidth, maxheight);
        setMinimumSize(size);
        setMaximumSize(size);
        setPreferredSize(size);
        //streamsList.setDragEnabled(true);
        streamsList.setTransferHandler(new DataStreamTransferHandler());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileSelectionPanel = new javax.swing.JPanel();
        fileSelectionLabel = new javax.swing.JLabel();
        fileSelectionField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        dataStreamsViewPanel = new javax.swing.JPanel();
        dataStreamsLabel = new javax.swing.JLabel();
        streamsListScrollPane = new javax.swing.JScrollPane();
        streamsList = new javax.swing.JList<DataStream>();

        setMaximumSize(new java.awt.Dimension(250, 700));
        setMinimumSize(new java.awt.Dimension(250, 700));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(250, 700));

        fileSelectionPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        fileSelectionLabel.setText("File Selection");

        fileSelectionField.setEditable(false);
        fileSelectionField.setText("<No file selected>");
        fileSelectionField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileSelectionFieldMouseClicked(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fileSelectionPanelLayout = new javax.swing.GroupLayout(fileSelectionPanel);
        fileSelectionPanel.setLayout(fileSelectionPanelLayout);
        fileSelectionPanelLayout.setHorizontalGroup(
            fileSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fileSelectionField)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, fileSelectionPanelLayout.createSequentialGroup()
                        .addComponent(browseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                        .addComponent(loadButton))
                    .addComponent(fileSelectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        fileSelectionPanelLayout.setVerticalGroup(
            fileSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileSelectionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileSelectionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(browseButton)
                    .addComponent(loadButton))
                .addContainerGap())
        );

        dataStreamsViewPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        dataStreamsLabel.setText("DataStreams");

        streamsListScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        streamsListScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        streamsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        streamsList.setDragEnabled(true);
        streamsListScrollPane.setViewportView(streamsList);

        javax.swing.GroupLayout dataStreamsViewPanelLayout = new javax.swing.GroupLayout(dataStreamsViewPanel);
        dataStreamsViewPanel.setLayout(dataStreamsViewPanelLayout);
        dataStreamsViewPanelLayout.setHorizontalGroup(
            dataStreamsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dataStreamsViewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dataStreamsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(streamsListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(dataStreamsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                .addContainerGap())
        );
        dataStreamsViewPanelLayout.setVerticalGroup(
            dataStreamsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataStreamsViewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dataStreamsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(streamsListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dataStreamsViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileSelectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dataStreamsViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selectFile() {
        JFileChooser fc = new JFileChooser();
        int errco = fc.showOpenDialog(this);
        
        String fileField;
        
        if (errco == 1) {
            selectedFile = null;
            fileSelectionField.setText("<No file selected>");
        } else if (errco == 0) {
            selectedFile = fc.getSelectedFile();
            fileSelectionField.setText(selectedFile.getName());
        }
    }
    
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        selectFile();
    }//GEN-LAST:event_browseButtonActionPerformed

    private void fileSelectionFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileSelectionFieldMouseClicked
        selectFile();
    }//GEN-LAST:event_fileSelectionFieldMouseClicked
    
    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        if (selectedFile == null) {
            JOptionPane.showMessageDialog(this, "No file selected", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (loadable == false) {
            JOptionPane.showMessageDialog(this, "Busy, unable to load another file", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            loadable = false;
            Thread loadThread = new Thread() {
                @Override
                public void run() {
                    modelController.loadFile(selectedFile);
                }
            };
            loadThread.start();
        }
    }//GEN-LAST:event_loadButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel dataStreamsLabel;
    private javax.swing.JPanel dataStreamsViewPanel;
    private javax.swing.JTextField fileSelectionField;
    private javax.swing.JLabel fileSelectionLabel;
    private javax.swing.JPanel fileSelectionPanel;
    private javax.swing.JButton loadButton;
    private javax.swing.JList<DataStream> streamsList;
    private javax.swing.JScrollPane streamsListScrollPane;
    // End of variables declaration//GEN-END:variables

    public void setLoadable() {
        loadable = true;
    }
    
    public void tellDataStreams(ArrayList<DataStream> streams) {
        int limit = streams.size();
        DataStream[] streamsArr = new DataStream[limit];
        streams.toArray(streamsArr);
        streamsList.setListData(streamsArr);
    }
    
}
